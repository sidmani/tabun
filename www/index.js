(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.tabun = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";exports.byteLength=byteLength,exports.toByteArray=toByteArray,exports.fromByteArray=fromByteArray;for(var lookup=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,len=code.length;i<len;++i)lookup[i]=code[i],revLookup[code.charCodeAt(i)]=i;function getLens(o){var r=o.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var e=o.indexOf("=");return-1===e&&(e=r),[e,e===r?0:4-e%4]}function byteLength(o){var r=getLens(o),e=r[0],t=r[1];return 3*(e+t)/4-t}function _byteLength(o,r,e){return 3*(r+e)/4-e}function toByteArray(o){for(var r,e=getLens(o),t=e[0],n=e[1],u=new Arr(_byteLength(o,t,n)),p=0,a=n>0?t-4:t,h=0;h<a;h+=4)r=revLookup[o.charCodeAt(h)]<<18|revLookup[o.charCodeAt(h+1)]<<12|revLookup[o.charCodeAt(h+2)]<<6|revLookup[o.charCodeAt(h+3)],u[p++]=r>>16&255,u[p++]=r>>8&255,u[p++]=255&r;return 2===n&&(r=revLookup[o.charCodeAt(h)]<<2|revLookup[o.charCodeAt(h+1)]>>4,u[p++]=255&r),1===n&&(r=revLookup[o.charCodeAt(h)]<<10|revLookup[o.charCodeAt(h+1)]<<4|revLookup[o.charCodeAt(h+2)]>>2,u[p++]=r>>8&255,u[p++]=255&r),u}function tripletToBase64(o){return lookup[o>>18&63]+lookup[o>>12&63]+lookup[o>>6&63]+lookup[63&o]}function encodeChunk(o,r,e){for(var t,n=[],u=r;u<e;u+=3)t=(o[u]<<16&16711680)+(o[u+1]<<8&65280)+(255&o[u+2]),n.push(tripletToBase64(t));return n.join("")}function fromByteArray(o){for(var r,e=o.length,t=e%3,n=[],u=0,p=e-t;u<p;u+=16383)n.push(encodeChunk(o,u,u+16383>p?p:u+16383));return 1===t?(r=o[e-1],n.push(lookup[r>>2]+lookup[r<<4&63]+"==")):2===t&&(r=(o[e-2]<<8)+o[e-1],n.push(lookup[r>>10]+lookup[r>>4&63]+lookup[r<<2&63]+"=")),n.join("")}revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63;

},{}],2:[function(require,module,exports){
"use strict";var base64=require("base64-js"),ieee754=require("ieee754");exports.Buffer=Buffer,exports.SlowBuffer=SlowBuffer,exports.INSPECT_MAX_BYTES=50;var K_MAX_LENGTH=2147483647;function typedArraySupport(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()}catch(e){return!1}}function createBuffer(e){if(e>K_MAX_LENGTH)throw new RangeError("Invalid typed array length");var t=new Uint8Array(e);return t.__proto__=Buffer.prototype,t}function Buffer(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return allocUnsafe(e)}return from(e,t,r)}function from(e,t,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return isArrayBuffer(e)||e&&isArrayBuffer(e.buffer)?fromArrayBuffer(e,t,r):"string"==typeof e?fromString(e,t):fromObject(e)}function assertSize(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('"size" argument must not be negative')}function alloc(e,t,r){return assertSize(e),e<=0?createBuffer(e):void 0!==t?"string"==typeof r?createBuffer(e).fill(t,r):createBuffer(e).fill(t):createBuffer(e)}function allocUnsafe(e){return assertSize(e),createBuffer(e<0?0:0|checked(e))}function fromString(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!Buffer.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var r=0|byteLength(e,t),n=createBuffer(r),f=n.write(e,t);return f!==r&&(n=n.slice(0,f)),n}function fromArrayLike(e){for(var t=e.length<0?0:0|checked(e.length),r=createBuffer(t),n=0;n<t;n+=1)r[n]=255&e[n];return r}function fromArrayBuffer(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return(n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r)).__proto__=Buffer.prototype,n}function fromObject(e){if(Buffer.isBuffer(e)){var t=0|checked(e.length),r=createBuffer(t);return 0===r.length?r:(e.copy(r,0,0,t),r)}if(e){if(ArrayBuffer.isView(e)||"length"in e)return"number"!=typeof e.length||numberIsNaN(e.length)?createBuffer(0):fromArrayLike(e);if("Buffer"===e.type&&Array.isArray(e.data))return fromArrayLike(e.data)}throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.")}function checked(e){if(e>=K_MAX_LENGTH)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+K_MAX_LENGTH.toString(16)+" bytes");return 0|e}function SlowBuffer(e){return+e!=e&&(e=0),Buffer.alloc(+e)}function byteLength(e,t){if(Buffer.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||isArrayBuffer(e))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return utf8ToBytes(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return base64ToBytes(e).length;default:if(n)return utf8ToBytes(e).length;t=(""+t).toLowerCase(),n=!0}}function slowToString(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return hexSlice(this,t,r);case"utf8":case"utf-8":return utf8Slice(this,t,r);case"ascii":return asciiSlice(this,t,r);case"latin1":case"binary":return latin1Slice(this,t,r);case"base64":return base64Slice(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function swap(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function bidirectionalIndexOf(e,t,r,n,f){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),numberIsNaN(r=+r)&&(r=f?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(f)return-1;r=e.length-1}else if(r<0){if(!f)return-1;r=0}if("string"==typeof t&&(t=Buffer.from(t,n)),Buffer.isBuffer(t))return 0===t.length?-1:arrayIndexOf(e,t,r,n,f);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?f?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):arrayIndexOf(e,[t],r,n,f);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(e,t,r,n,f){var i,o=1,u=e.length,s=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,u/=2,s/=2,r/=2}function a(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(f){var h=-1;for(i=r;i<u;i++)if(a(e,i)===a(t,-1===h?0:i-h)){if(-1===h&&(h=i),i-h+1===s)return h*o}else-1!==h&&(i-=i-h),h=-1}else for(r+s>u&&(r=u-s),i=r;i>=0;i--){for(var c=!0,l=0;l<s;l++)if(a(e,i+l)!==a(t,l)){c=!1;break}if(c)return i}return-1}function hexWrite(e,t,r,n){r=Number(r)||0;var f=e.length-r;n?(n=Number(n))>f&&(n=f):n=f;var i=t.length;n>i/2&&(n=i/2);for(var o=0;o<n;++o){var u=parseInt(t.substr(2*o,2),16);if(numberIsNaN(u))return o;e[r+o]=u}return o}function utf8Write(e,t,r,n){return blitBuffer(utf8ToBytes(t,e.length-r),e,r,n)}function asciiWrite(e,t,r,n){return blitBuffer(asciiToBytes(t),e,r,n)}function latin1Write(e,t,r,n){return asciiWrite(e,t,r,n)}function base64Write(e,t,r,n){return blitBuffer(base64ToBytes(t),e,r,n)}function ucs2Write(e,t,r,n){return blitBuffer(utf16leToBytes(t,e.length-r),e,r,n)}function base64Slice(e,t,r){return 0===t&&r===e.length?base64.fromByteArray(e):base64.fromByteArray(e.slice(t,r))}function utf8Slice(e,t,r){r=Math.min(e.length,r);for(var n=[],f=t;f<r;){var i,o,u,s,a=e[f],h=null,c=a>239?4:a>223?3:a>191?2:1;if(f+c<=r)switch(c){case 1:a<128&&(h=a);break;case 2:128==(192&(i=e[f+1]))&&(s=(31&a)<<6|63&i)>127&&(h=s);break;case 3:i=e[f+1],o=e[f+2],128==(192&i)&&128==(192&o)&&(s=(15&a)<<12|(63&i)<<6|63&o)>2047&&(s<55296||s>57343)&&(h=s);break;case 4:i=e[f+1],o=e[f+2],u=e[f+3],128==(192&i)&&128==(192&o)&&128==(192&u)&&(s=(15&a)<<18|(63&i)<<12|(63&o)<<6|63&u)>65535&&s<1114112&&(h=s)}null===h?(h=65533,c=1):h>65535&&(h-=65536,n.push(h>>>10&1023|55296),h=56320|1023&h),n.push(h),f+=c}return decodeCodePointsArray(n)}exports.kMaxLength=K_MAX_LENGTH,Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport(),Buffer.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(Buffer.prototype,"parent",{get:function(){if(this instanceof Buffer)return this.buffer}}),Object.defineProperty(Buffer.prototype,"offset",{get:function(){if(this instanceof Buffer)return this.byteOffset}}),"undefined"!=typeof Symbol&&Symbol.species&&Buffer[Symbol.species]===Buffer&&Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),Buffer.poolSize=8192,Buffer.from=function(e,t,r){return from(e,t,r)},Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array,Buffer.alloc=function(e,t,r){return alloc(e,t,r)},Buffer.allocUnsafe=function(e){return allocUnsafe(e)},Buffer.allocUnsafeSlow=function(e){return allocUnsafe(e)},Buffer.isBuffer=function(e){return null!=e&&!0===e._isBuffer},Buffer.compare=function(e,t){if(!Buffer.isBuffer(e)||!Buffer.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,f=0,i=Math.min(r,n);f<i;++f)if(e[f]!==t[f]){r=e[f],n=t[f];break}return r<n?-1:n<r?1:0},Buffer.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Buffer.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=Buffer.allocUnsafe(t),f=0;for(r=0;r<e.length;++r){var i=e[r];if(ArrayBuffer.isView(i)&&(i=Buffer.from(i)),!Buffer.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,f),f+=i.length}return n},Buffer.byteLength=byteLength,Buffer.prototype._isBuffer=!0,Buffer.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)swap(this,t,t+1);return this},Buffer.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)swap(this,t,t+3),swap(this,t+1,t+2);return this},Buffer.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)swap(this,t,t+7),swap(this,t+1,t+6),swap(this,t+2,t+5),swap(this,t+3,t+4);return this},Buffer.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?utf8Slice(this,0,e):slowToString.apply(this,arguments)},Buffer.prototype.toLocaleString=Buffer.prototype.toString,Buffer.prototype.equals=function(e){if(!Buffer.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Buffer.compare(this,e)},Buffer.prototype.inspect=function(){var e="",t=exports.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},Buffer.prototype.compare=function(e,t,r,n,f){if(!Buffer.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===f&&(f=this.length),t<0||r>e.length||n<0||f>this.length)throw new RangeError("out of range index");if(n>=f&&t>=r)return 0;if(n>=f)return-1;if(t>=r)return 1;if(this===e)return 0;for(var i=(f>>>=0)-(n>>>=0),o=(r>>>=0)-(t>>>=0),u=Math.min(i,o),s=this.slice(n,f),a=e.slice(t,r),h=0;h<u;++h)if(s[h]!==a[h]){i=s[h],o=a[h];break}return i<o?-1:o<i?1:0},Buffer.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},Buffer.prototype.indexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!0)},Buffer.prototype.lastIndexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!1)},Buffer.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var f=this.length-t;if((void 0===r||r>f)&&(r=f),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return hexWrite(this,e,t,r);case"utf8":case"utf-8":return utf8Write(this,e,t,r);case"ascii":return asciiWrite(this,e,t,r);case"latin1":case"binary":return latin1Write(this,e,t,r);case"base64":return base64Write(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},Buffer.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;function decodeCodePointsArray(e){var t=e.length;if(t<=MAX_ARGUMENTS_LENGTH)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=MAX_ARGUMENTS_LENGTH));return r}function asciiSlice(e,t,r){var n="";r=Math.min(e.length,r);for(var f=t;f<r;++f)n+=String.fromCharCode(127&e[f]);return n}function latin1Slice(e,t,r){var n="";r=Math.min(e.length,r);for(var f=t;f<r;++f)n+=String.fromCharCode(e[f]);return n}function hexSlice(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var f="",i=t;i<r;++i)f+=toHex(e[i]);return f}function utf16leSlice(e,t,r){for(var n=e.slice(t,r),f="",i=0;i<n.length;i+=2)f+=String.fromCharCode(n[i]+256*n[i+1]);return f}function checkOffset(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function checkInt(e,t,r,n,f,i){if(!Buffer.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>f||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function checkIEEE754(e,t,r,n,f,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function writeFloat(e,t,r,n,f){return t=+t,r>>>=0,f||checkIEEE754(e,t,r,4,3.4028234663852886e38,-3.4028234663852886e38),ieee754.write(e,t,r,n,23,4),r+4}function writeDouble(e,t,r,n,f){return t=+t,r>>>=0,f||checkIEEE754(e,t,r,8,1.7976931348623157e308,-1.7976931348623157e308),ieee754.write(e,t,r,n,52,8),r+8}Buffer.prototype.slice=function(e,t){var r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);var n=this.subarray(e,t);return n.__proto__=Buffer.prototype,n},Buffer.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e],f=1,i=0;++i<t&&(f*=256);)n+=this[e+i]*f;return n},Buffer.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e+--t],f=1;t>0&&(f*=256);)n+=this[e+--t]*f;return n},Buffer.prototype.readUInt8=function(e,t){return e>>>=0,t||checkOffset(e,1,this.length),this[e]},Buffer.prototype.readUInt16LE=function(e,t){return e>>>=0,t||checkOffset(e,2,this.length),this[e]|this[e+1]<<8},Buffer.prototype.readUInt16BE=function(e,t){return e>>>=0,t||checkOffset(e,2,this.length),this[e]<<8|this[e+1]},Buffer.prototype.readUInt32LE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Buffer.prototype.readUInt32BE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Buffer.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e],f=1,i=0;++i<t&&(f*=256);)n+=this[e+i]*f;return n>=(f*=128)&&(n-=Math.pow(2,8*t)),n},Buffer.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=t,f=1,i=this[e+--n];n>0&&(f*=256);)i+=this[e+--n]*f;return i>=(f*=128)&&(i-=Math.pow(2,8*t)),i},Buffer.prototype.readInt8=function(e,t){return e>>>=0,t||checkOffset(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Buffer.prototype.readInt16LE=function(e,t){e>>>=0,t||checkOffset(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt16BE=function(e,t){e>>>=0,t||checkOffset(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt32LE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Buffer.prototype.readInt32BE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Buffer.prototype.readFloatLE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),ieee754.read(this,e,!0,23,4)},Buffer.prototype.readFloatBE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),ieee754.read(this,e,!1,23,4)},Buffer.prototype.readDoubleLE=function(e,t){return e>>>=0,t||checkOffset(e,8,this.length),ieee754.read(this,e,!0,52,8)},Buffer.prototype.readDoubleBE=function(e,t){return e>>>=0,t||checkOffset(e,8,this.length),ieee754.read(this,e,!1,52,8)},Buffer.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t>>>=0,r>>>=0,n)||checkInt(this,e,t,r,Math.pow(2,8*r)-1,0);var f=1,i=0;for(this[t]=255&e;++i<r&&(f*=256);)this[t+i]=e/f&255;return t+r},Buffer.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t>>>=0,r>>>=0,n)||checkInt(this,e,t,r,Math.pow(2,8*r)-1,0);var f=r-1,i=1;for(this[t+f]=255&e;--f>=0&&(i*=256);)this[t+f]=e/i&255;return t+r},Buffer.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,1,255,0),this[t]=255&e,t+1},Buffer.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},Buffer.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},Buffer.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},Buffer.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Buffer.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var f=Math.pow(2,8*r-1);checkInt(this,e,t,r,f-1,-f)}var i=0,o=1,u=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===u&&0!==this[t+i-1]&&(u=1),this[t+i]=(e/o>>0)-u&255;return t+r},Buffer.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var f=Math.pow(2,8*r-1);checkInt(this,e,t,r,f-1,-f)}var i=r-1,o=1,u=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===u&&0!==this[t+i+1]&&(u=1),this[t+i]=(e/o>>0)-u&255;return t+r},Buffer.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},Buffer.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},Buffer.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},Buffer.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},Buffer.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Buffer.prototype.writeFloatLE=function(e,t,r){return writeFloat(this,e,t,!0,r)},Buffer.prototype.writeFloatBE=function(e,t,r){return writeFloat(this,e,t,!1,r)},Buffer.prototype.writeDoubleLE=function(e,t,r){return writeDouble(this,e,t,!0,r)},Buffer.prototype.writeDoubleBE=function(e,t,r){return writeDouble(this,e,t,!1,r)},Buffer.prototype.copy=function(e,t,r,n){if(!Buffer.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var f=n-r;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,r,n);else if(this===e&&r<t&&t<n)for(var i=f-1;i>=0;--i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,n),t);return f},Buffer.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!Buffer.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){var f=e.charCodeAt(0);("utf8"===n&&f<128||"latin1"===n)&&(e=f)}}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var o=Buffer.isBuffer(e)?e:new Buffer(e,n),u=o.length;if(0===u)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=o[i%u]}return this};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;function base64clean(e){if((e=(e=e.split("=")[0]).trim().replace(INVALID_BASE64_RE,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}function toHex(e){return e<16?"0"+e.toString(16):e.toString(16)}function utf8ToBytes(e,t){var r;t=t||1/0;for(var n=e.length,f=null,i=[],o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!f){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&i.push(239,191,189);continue}f=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),f=r;continue}r=65536+(f-55296<<10|r-56320)}else f&&(t-=3)>-1&&i.push(239,191,189);if(f=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function asciiToBytes(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}function utf16leToBytes(e,t){for(var r,n,f,i=[],o=0;o<e.length&&!((t-=2)<0);++o)n=(r=e.charCodeAt(o))>>8,f=r%256,i.push(f),i.push(n);return i}function base64ToBytes(e){return base64.toByteArray(base64clean(e))}function blitBuffer(e,t,r,n){for(var f=0;f<n&&!(f+r>=t.length||f>=e.length);++f)t[f+r]=e[f];return f}function isArrayBuffer(e){return e instanceof ArrayBuffer||null!=e&&null!=e.constructor&&"ArrayBuffer"===e.constructor.name&&"number"==typeof e.byteLength}function numberIsNaN(e){return e!=e}

},{"base64-js":1,"ieee754":3}],3:[function(require,module,exports){
"use strict";exports.read=function(t,a,o,r,h){var M,p,w=8*h-r-1,e=(1<<w)-1,f=e>>1,i=-7,s=o?h-1:0,N=o?-1:1,n=t[a+s];for(s+=N,M=n&(1<<-i)-1,n>>=-i,i+=w;i>0;M=256*M+t[a+s],s+=N,i-=8);for(p=M&(1<<-i)-1,M>>=-i,i+=r;i>0;p=256*p+t[a+s],s+=N,i-=8);if(0===M)M=1-f;else{if(M===e)return p?NaN:1/0*(n?-1:1);p+=Math.pow(2,r),M-=f}return(n?-1:1)*p*Math.pow(2,M-r)},exports.write=function(t,a,o,r,h,M){var p,w,e,f=8*M-h-1,i=(1<<f)-1,s=i>>1,N=23===h?Math.pow(2,-24)-Math.pow(2,-77):0,n=r?0:M-1,u=r?1:-1,c=a<0||0===a&&1/a<0?1:0;for(a=Math.abs(a),isNaN(a)||a===1/0?(w=isNaN(a)?1:0,p=i):(p=Math.floor(Math.log(a)/Math.LN2),a*(e=Math.pow(2,-p))<1&&(p--,e*=2),(a+=p+s>=1?N/e:N*Math.pow(2,1-s))*e>=2&&(p++,e/=2),p+s>=i?(w=0,p=i):p+s>=1?(w=(a*e-1)*Math.pow(2,h),p+=s):(w=a*Math.pow(2,s-1)*Math.pow(2,h),p=0));h>=8;t[o+n]=255&w,n+=u,w/=256,h-=8);for(p=p<<h|w,f+=h;f>0;t[o+n]=255&p,n+=u,p/=256,f-=8);t[o+n-u]|=128*c};

},{}],4:[function(require,module,exports){
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t){var r,e=Object.prototype,n=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag",u="object"===("undefined"==typeof module?"undefined":_typeof(module)),f=t.regeneratorRuntime;if(f)u&&(module.exports=f);else{(f=t.regeneratorRuntime=u?module.exports:{}).wrap=w;var h="suspendedStart",s="suspendedYield",l="executing",p="completed",y={},d={};d[i]=function(){return this};var v=Object.getPrototypeOf,m=v&&v(v(N([])));m&&m!==e&&n.call(m,i)&&(d=m);var g=E.prototype=x.prototype=Object.create(d);b.prototype=g.constructor=E,E.constructor=b,E[c]=b.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return!!r&&(r===b||"GeneratorFunction"===(r.displayName||r.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(g),t},f.awrap=function(t){return{__await:t}},_(j.prototype),j.prototype[a]=function(){return this},f.AsyncIterator=j,f.async=function(t,r,e,n){var o=new j(w(t,r,e,n));return f.isGeneratorFunction(r)?o:o.next().then(function(t){return t.done?t.value:o.next()})},_(g),g[c]="Generator",g[i]=function(){return this},g.toString=function(){return"[object Generator]"},f.keys=function(t){var r=[];for(var e in t)r.push(e);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},f.values=N,G.prototype={constructor:G,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(k),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(n,o){return c.type="throw",c.arg=t,e.next=n,o&&(e.method="next",e.arg=r),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),f=n.call(a,"finallyLoc");if(u&&f){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,r){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=r,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,r){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),y},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),k(e),y}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc===t){var n=e.completion;if("throw"===n.type){var o=n.arg;k(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:N(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),y}}}function w(t,r,e,n){var o=r&&r.prototype instanceof x?r:x,i=Object.create(o.prototype),a=new G(n||[]);return i._invoke=function(t,r,e){var n=h;return function(o,i){if(n===l)throw new Error("Generator is already running");if(n===p){if("throw"===o)throw i;return P()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var c=O(a,e);if(c){if(c===y)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(n===h)throw n=p,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);n=l;var u=L(t,r,e);if("normal"===u.type){if(n=e.done?p:s,u.arg===y)continue;return{value:u.arg,done:e.done}}"throw"===u.type&&(n=p,e.method="throw",e.arg=u.arg)}}}(t,e,a),i}function L(t,r,e){try{return{type:"normal",arg:t.call(r,e)}}catch(t){return{type:"throw",arg:t}}}function x(){}function b(){}function E(){}function _(t){["next","throw","return"].forEach(function(r){t[r]=function(t){return this._invoke(r,t)}})}function j(t){var r;this._invoke=function(e,o){function i(){return new Promise(function(r,i){!function r(e,o,i,a){var c=L(t[e],t,o);if("throw"!==c.type){var u=c.arg,f=u.value;return f&&"object"===(void 0===f?"undefined":_typeof(f))&&n.call(f,"__await")?Promise.resolve(f.__await).then(function(t){r("next",t,i,a)},function(t){r("throw",t,i,a)}):Promise.resolve(f).then(function(t){u.value=t,i(u)},function(t){return r("throw",t,i,a)})}a(c.arg)}(e,o,r,i)})}return r=r?r.then(i,i):i()}}function O(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,O(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var o=L(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,y;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,y):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function S(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r)}function k(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r}function G(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function N(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function e(){for(;++o<t.length;)if(n.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=r,e.done=!0,e};return a.next=a}}return{next:P}}function P(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")());

},{}],5:[function(require,module,exports){
"use strict";function _asyncToGenerator(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,n){return function r(s,i){try{var o=t[s](i),c=o.value}catch(e){return void n(e)}if(!o.done)return Promise.resolve(c).then(function(e){r("next",e)},function(e){r("throw",e)});e(c)}("next")})}}var Sources=require("./sources"),SyncedFile=require("../syncedFile.js");function Decks(e,t){this.settings=e,this.drive=t}Decks.prototype.list=function(){return this.settings.get().decks},Decks.prototype.add=function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function e(t,n){var r,s,i,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(Sources[t]){e.next=2;break}throw new Error("Unknown source");case 2:return e.next=4,Sources[t].getMeta(n);case 4:return r=e.sent,console.log(r),s=r.name+"_"+(new Date).getTime(),(i=this.settings.get()).decks.push({source:t,at:n,name:r.name,version:r.version,data:s}),o=new SyncedFile(this.drive,s),e.next=12,Promise.all([o.synchronize("id,ease,interval,next\n"),this.settings.set(i)]);case 12:case"end":return e.stop()}},e,this)}));return function(t,n){return e.apply(this,arguments)}}(),module.exports=Decks;

},{"../syncedFile.js":9,"./sources":6}],6:[function(require,module,exports){
"use strict";function _asyncToGenerator(t){return function(){var n=t.apply(this,arguments);return new Promise(function(t,e){return function r(o,u){try{var i=n[o](u),c=i.value}catch(t){return void e(t)}if(!i.done)return Promise.resolve(c).then(function(t){r("next",t)},function(t){r("throw",t)});t(c)}("next")})}}var github={getMeta:function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",fetch("https://api.github.com/repos/"+n+"/contents/deck.json").then(function(t){return t.json()}).then(function(t){return JSON.parse(window.atob(t.content))}));case 1:case"end":return t.stop()}},t,this)}));return function(n){return t.apply(this,arguments)}}()};module.exports={github:github};

},{}],7:[function(require,module,exports){
(function (Buffer){
"use strict";function _asyncToGenerator(t){return function(){var e=t.apply(this,arguments);return new Promise(function(t,r){return function n(o,i){try{var a=e[o](i),u=a.value}catch(t){return void r(t)}if(!a.done)return Promise.resolve(u).then(function(t){n("next",t)},function(t){n("throw",t)});t(u)}("next")})}}var qs=require("./util/querystring"),http=require("./util/http"),authScope="https://www.googleapis.com/auth/drive.appdata",endpoints={upload:"https://www.googleapis.com/upload/drive/v3/files",files:"https://www.googleapis.com/drive/v3/files",drive:"https://www.googleapis.com/drive/v3",auth:"https://accounts.google.com/o/oauth2/v2/auth",tokenValidation:"https://www.googleapis.com/oauth2/v3/tokeninfo"},clientId="631778365896-q1bihh884del9i6kg1qf22d6t563kj2e.apps.googleusercontent.com";function Drive(t,e){this.token=t,this.expiry=e}Drive.prototype.httpMethod=function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function t(e,r,n,o,i){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",http.request(e,r,n,o,Object.assign({Authorization:"Bearer "+this.token},i)));case 1:case"end":return t.stop()}},t,this)}));return function(e,r,n,o,i){return t.apply(this,arguments)}}(),Drive.authURL=endpoints.auth+"?"+qs.build({client_id:clientId,redirect_uri:"https://localhost:8000/auth",response_type:"token",scope:authScope,include_granted_scopes:!0,state:"foo"}),Drive.retrieve=function(){if(!window.localStorage.driveData)throw new Error("Could not load token.");var t=JSON.parse(window.localStorage.driveData);return new Drive(t.token,t.expiry)},Drive.setup=_asyncToGenerator(regeneratorRuntime.mark(function t(){var e;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,e=Drive.retrieve(),t.next=4,e.validate();case 4:return t.abrupt("return",e);case 7:t.prev=7,t.t0=t.catch(0),window.location=Drive.authURL;case 10:case"end":return t.stop()}},t,this,[[0,7]])})),Drive.prototype.persist=function(){window.localStorage.driveData=JSON.stringify({token:this.token,expiry:this.expiry})},Drive.prototype.validate=_asyncToGenerator(regeneratorRuntime.mark(function t(){var e,r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.httpMethod(endpoints.tokenValidation,{access_token:this.token},void 0,"GET");case 2:return e=t.sent,t.next=5,e.json();case 5:if(!(r=t.sent).error&&r.aud===clientId&&r.scope===authScope){t.next=8;break}throw new Error("Token validation failed");case 8:case"end":return t.stop()}},t,this)})),Drive.prototype.get=function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.httpMethod(endpoints.files+"/"+e,{alt:"media"},void 0,"GET"));case 1:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}(),Drive.prototype.list=function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function t(e){var r,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:["appDataFolder"];return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.httpMethod(endpoints.files,{spaces:n.join(","),q:e},void 0,"GET");case 2:return r=t.sent,t.next=5,r.json();case 5:return t.abrupt("return",t.sent.files);case 7:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}(),Drive.prototype.put=function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function t(e,r){var n,o,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:["appDataFolder"];return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n={name:e,parents:i},o=http.multipart([JSON.stringify(n),r],[http.mime.json,http.mime.plainText]),t.abrupt("return",this.httpMethod(endpoints.upload,{uploadType:"multipart"},o,"POST",{"Content-Type":"multipart/related; boundary=boundary","Content-Length":Buffer.byteLength(r,"utf8")}));case 3:case"end":return t.stop()}},t,this)}));return function(e,r){return t.apply(this,arguments)}}(),Drive.prototype.update=function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function t(e,r){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.httpMethod(endpoints.upload+"/"+e,{uploadType:"media"},r,"PATCH"));case 1:case"end":return t.stop()}},t,this)}));return function(e,r){return t.apply(this,arguments)}}(),module.exports=Drive;

}).call(this,require("buffer").Buffer)

},{"./util/http":10,"./util/querystring":11,"buffer":2}],8:[function(require,module,exports){
"use strict";function _asyncToGenerator(t){return function(){var e=t.apply(this,arguments);return new Promise(function(t,n){return function r(i,o){try{var s=e[i](o),u=s.value}catch(t){return void n(t)}if(!s.done)return Promise.resolve(u).then(function(t){r("next",t)},function(t){r("throw",t)});t(u)}("next")})}}var SyncedFile=require("./syncedFile");function Settings(t){this.drive=t,this.file=new SyncedFile(t,"tabun.json")}Settings.default=function(){return{decks:[]}},Settings.prototype.synchronize=function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.file.synchronize(e?JSON.stringify(e):void 0));case 1:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}(),Settings.prototype.set=function(t){return this.file.setLocal(JSON.stringify(t)),this.synchronize()},Settings.prototype.get=function(){return JSON.parse(this.file.retrieve())},module.exports=Settings;

},{"./syncedFile":9}],9:[function(require,module,exports){
"use strict";function _asyncToGenerator(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,r){return function n(i,a){try{var o=t[i](a),s=o.value}catch(e){return void r(e)}if(!o.done)return Promise.resolve(s).then(function(e){n("next",e)},function(e){n("throw",e)});e(s)}("next")})}}function SyncedFile(e,t){this.drive=e,this.name=t,this.localStorageIdKey=t+"_id"}function prependTimestamp(e){return(new Date).getTime()+"|"+e}function stripTimestamp(e){return e.substr(e.indexOf("|")+1)}function getTimestamp(e){return parseInt(e.substr(0,e.indexOf("|")),10)}function splitTimestamp(e){if(e)return{time:getTimestamp(e),contents:stripTimestamp(e)}}SyncedFile.prototype.retrieveRemoteId=_asyncToGenerator(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!window.localStorage[this.localStorageIdKey]){e.next=2;break}return e.abrupt("return",window.localStorage[this.localStorageIdKey]);case 2:return e.next=4,this.drive.list("name = '"+this.name+"'");case 4:if(0!==(t=e.sent).length){e.next=7;break}return e.abrupt("return",void 0);case 7:return window.localStorage[this.localStorageIdKey]=t[0].id,e.abrupt("return",t[0].id);case 9:case"end":return e.stop()}},e,this)})),SyncedFile.prototype.retrieveRemote=_asyncToGenerator(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.retrieveRemoteId();case 2:if(t=e.sent){e.next=6;break}return window.localStorage.removeItem(this.localStorageIdKey),e.abrupt("return",void 0);case 6:return e.prev=6,e.next=9,this.drive.get(t);case 9:return e.abrupt("return",e.sent.text());case 12:throw e.prev=12,e.t0=e.catch(6),window.localStorage.removeItem(this.localStorageIdKey),e.t0;case 16:case"end":return e.stop()}},e,this,[[6,12]])})),SyncedFile.prototype.setRemote=function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function e(t){var r,n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.retrieveRemoteId();case 2:if(r=e.sent,n=prependTimestamp(t),r){e.next=6;break}return e.abrupt("return",this.drive.put(this.name,n));case 6:return e.abrupt("return",this.drive.update(r,n));case 7:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}(),SyncedFile.prototype.retrieveLocal=function(){return window.localStorage[this.name]},SyncedFile.prototype.setLocal=function(e){window.localStorage[this.name]=prependTimestamp(e)},SyncedFile.prototype.retrieve=function(){var e=this.retrieveLocal();if(!e)throw new Error("Could not load local data for file "+this.name);return stripTimestamp(e)},SyncedFile.prototype.synchronize=function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function e(t){var r,n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=splitTimestamp,e.next=3,this.retrieveRemote();case 3:if(e.t1=e.sent,r=(0,e.t0)(e.t1),!(n=splitTimestamp(this.retrieveLocal()))||!(r&&n.time>r.time)&&r){e.next=11;break}return e.next=9,this.setRemote(n.contents);case 9:e.next=20;break;case 11:if(!r){e.next=15;break}this.setLocal(r.contents),e.next=20;break;case 15:if(t){e.next=17;break}throw new Error("No data to synchronize!");case 17:return this.setLocal(t),e.next=20,this.setRemote(t);case 20:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}(),module.exports=SyncedFile;

},{}],10:[function(require,module,exports){
"use strict";var request=function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function e(r,n,t,u,i){var o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return o=r,n&&(o+="?"+qs.build(n)),e.abrupt("return",fetch(o,{body:t,method:u,headers:new Headers(i)}));case 3:case"end":return e.stop()}},e,this)}));return function(r,n,t,u,i){return e.apply(this,arguments)}}();function _asyncToGenerator(e){return function(){var r=e.apply(this,arguments);return new Promise(function(e,n){return function t(u,i){try{var o=r[u](i),a=o.value}catch(e){return void n(e)}if(!o.done)return Promise.resolve(a).then(function(e){t("next",e)},function(e){t("throw",e)});e(a)}("next")})}}var qs=require("./querystring"),mime={json:"application/json",plainText:"text/plain"};function multipart(e,r){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"boundary",t="",u=0;u<e.length;u++)t+="--"+n+"\nContent-Type: "+r[u]+"; charset=UTF-8\n\n"+e[u]+"\n";return t+="\n--"+n+"--"}module.exports={request:request,multipart:multipart,mime:mime};

},{"./querystring":11}],11:[function(require,module,exports){
"use strict";module.exports={parse:function(n){var e={};return n.split("&").forEach(function(n){if(n.includes("=")){var t=n.split("=");e[t[0]]=t[1]}else e[n]=!0}),e},build:function(n){return Object.keys(n).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(n[e])}).join("&")}};

},{}],12:[function(require,module,exports){
"use strict";require("regenerator-runtime/runtime");var settings=require("./render/settings"),decks=require("./render/decks"),auth=require("./render/auth");module.exports={settings:settings,decks:decks,auth:auth};

},{"./render/auth":13,"./render/decks":15,"./render/settings":16,"regenerator-runtime/runtime":4}],13:[function(require,module,exports){
"use strict";function _asyncToGenerator(e){return function(){var r=e.apply(this,arguments);return new Promise(function(e,n){return function t(a,o){try{var i=r[a](o),c=i.value}catch(e){return void n(e)}if(!i.done)return Promise.resolve(c).then(function(e){t("next",e)},function(e){t("throw",e)});e(c)}("next")})}}var Drive=require("../core/drive"),qs=require("../core/util/querystring");module.exports=function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function e(){var r,n,t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!((r=window.location.hash.substr(1)).length>0)){e.next=19;break}if(!(n=qs.parse(r)).error){e.next=6;break}return console.error("Auth failure."),e.abrupt("return");case 6:return e.prev=6,t=new Drive(n.access_token,n.expires_in+Math.floor(Date.now()/1e3)),e.next=10,t.validate(n.access_token);case 10:t.persist(),window.location="../decks/",e.next=17;break;case 14:e.prev=14,e.t0=e.catch(6),document.body.innerHTML='Authentication error. <a href="/auth/">Try again</a>';case 17:e.next=23;break;case 19:return e.next=21,Drive.setup();case 21:if(!e.sent){e.next=23;break}window.location="../decks/";case 23:case"end":return e.stop()}},e,this,[[6,14]])}));return function(){return e.apply(this,arguments)}}();

},{"../core/drive":7,"../core/util/querystring":11}],14:[function(require,module,exports){
"use strict";module.exports=function e(t){var n=document.createElement(t.tag.toUpperCase());return Object.keys(t).forEach(function(e){"tag"!==e&&"children"!==e&&"text"!==e&&n.setAttribute(e,t[e])}),t.children&&t.children.forEach(function(t){n.appendChild(e(t))}),t.text&&n.appendChild(document.createTextNode(t.text)),n};

},{}],15:[function(require,module,exports){
"use strict";var display=function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function e(){var t,r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Drive.setup();case 2:return t=e.sent,r=new Settings(t),e.next=6,r.synchronize(Settings.default());case 6:layout(new Decks(r,t).list());case 8:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}();function _asyncToGenerator(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,r){return function n(i,s){try{var a=t[i](s),c=a.value}catch(e){return void r(e)}if(!a.done)return Promise.resolve(c).then(function(e){n("next",e)},function(e){n("throw",e)});e(c)}("next")})}}var Decks=require("../core/deck/decks"),Drive=require("../core/drive"),Settings=require("../core/settings"),build=require("./buildHTML");function layout(e){for(var t=document.getElementById("decks"),r=0;r<e.length;r+=1)t.appendChild(build({tag:"div",class:"deck",children:[{tag:"span",class:"deck-name",text:e[r].name},{tag:"span",class:"deck-source",text:e[r].source}]}))}module.exports={display:display};

},{"../core/deck/decks":5,"../core/drive":7,"../core/settings":8,"./buildHTML":14}],16:[function(require,module,exports){
"use strict";var display=function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function e(){var r,n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Drive.setup();case 2:return r=e.sent,n=new Settings(r),e.next=6,n.synchronize();case 6:layout(n.get());case 7:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}();function _asyncToGenerator(e){return function(){var r=e.apply(this,arguments);return new Promise(function(e,n){return function t(i,o){try{var u=r[i](o),s=u.value}catch(e){return void n(e)}if(!u.done)return Promise.resolve(s).then(function(e){t("next",e)},function(e){t("throw",e)});e(s)}("next")})}}var Drive=require("../core/drive"),Settings=require("../core/settings"),build=require("./buildHTML");function layout(e){console.log(e)}module.exports={display:display};

},{"../core/drive":7,"../core/settings":8,"./buildHTML":14}]},{},[12])(12)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsInNyYy9qcy9jb3JlL2RlY2svZGVja3MuanMiLCJzcmMvanMvY29yZS9kZWNrL3NvdXJjZXMuanMiLCJzcmMvanMvY29yZS9kcml2ZS5qcyIsInNyYy9qcy9jb3JlL3NldHRpbmdzLmpzIiwic3JjL2pzL2NvcmUvc3luY2VkRmlsZS5qcyIsInNyYy9qcy9jb3JlL3V0aWwvaHR0cC5qcyIsInNyYy9qcy9jb3JlL3V0aWwvcXVlcnlzdHJpbmcuanMiLCJzcmMvanMvaW5kZXguanMiLCJzcmMvanMvcmVuZGVyL2F1dGguanMiLCJzcmMvanMvcmVuZGVyL2J1aWxkSFRNTC5qcyIsInNyYy9qcy9yZW5kZXIvZGVja3MuanMiLCJzcmMvanMvcmVuZGVyL3NldHRpbmdzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsYUFFQSxRQUFRLFdBQWEsV0FDckIsUUFBUSxZQUFjLFlBQ3RCLFFBQVEsY0FBZ0IsY0FPeEIsSUFMQSxJQUFJLFVBQ0EsYUFDQSxJQUE0QixvQkFBZixXQUE2QixXQUFhLE1BRXZELEtBQU8sbUVBQ0YsRUFBSSxFQUFHLElBQU0sS0FBSyxPQUFRLEVBQUksTUFBTyxFQUM1QyxPQUFPLEdBQUssS0FBSyxHQUNqQixVQUFVLEtBQUssV0FBVyxJQUFNLEVBUWxDLFNBQVMsUUFBUyxHQUNoQixJQUFJLEVBQU0sRUFBSSxPQUVkLEdBQUksRUFBTSxFQUFJLEVBQ1osTUFBTSxJQUFJLE1BQU0sa0RBS2xCLElBQUksRUFBVyxFQUFJLFFBQVEsS0FPM0IsT0FOa0IsSUFBZCxJQUFpQixFQUFXLElBTXhCLEVBSmMs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RUFBQSxJQUFBLE1BQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSx5V0FSQSxJQUFNLE1BQVEsUUFBUSxpQkFDaEIsU0FBVyxRQUFRLG9CQUNuQixNQUFRLFFBQVEsZUFFdEIsU0FBUyxPQUFPLEdBQ2QsUUFBUSxJQUFJLEdBV2QsT0FBTyxTQUFZLFFBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG52YXIgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXRcbiAgfVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuZnVuY3Rpb24gZnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgKHZhbHVlICYmIGlzQXJyYXlCdWZmZXIodmFsdWUuYnVmZmVyKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbkJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbkJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlIChzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICB2YXIgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBidWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcigwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhidWYpKSB7XG4gICAgICBidWYgPSBCdWZmZXIuZnJvbShidWYpXG4gICAgfVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzQXJyYXlCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZyA9IEJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmdcblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVzZSBidWlsdC1pbiB3aGVuIGF2YWlsYWJsZSwgbWlzc2luZyBmcm9tIElFMTFcbiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpXG4gIH0gZWxzZSBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogbmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teKy8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgdGFrZXMgZXF1YWwgc2lnbnMgYXMgZW5kIG9mIHRoZSBCYXNlNjQgZW5jb2RpbmdcbiAgc3RyID0gc3RyLnNwbGl0KCc9JylbMF1cbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0ci50cmltKCkucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlcnMgZnJvbSBhbm90aGVyIGNvbnRleHQgKGkuZS4gYW4gaWZyYW1lKSBkbyBub3QgcGFzcyB0aGUgYGluc3RhbmNlb2ZgIGNoZWNrXG4vLyBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyB2YWxpZC4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8XG4gICAgKG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQXJyYXlCdWZmZXInICYmXG4gICAgICB0eXBlb2Ygb2JqLmJ5dGVMZW5ndGggPT09ICdudW1iZXInKVxufVxuXG5mdW5jdGlvbiBudW1iZXJJc05hTiAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gSW4gc2xvcHB5IG1vZGUsIHVuYm91bmQgYHRoaXNgIHJlZmVycyB0byB0aGUgZ2xvYmFsIG9iamVjdCwgZmFsbGJhY2sgdG9cbiAgLy8gRnVuY3Rpb24gY29uc3RydWN0b3IgaWYgd2UncmUgaW4gZ2xvYmFsIHN0cmljdCBtb2RlLiBUaGF0IGlzIHNhZGx5IGEgZm9ybVxuICAvLyBvZiBpbmRpcmVjdCBldmFsIHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LlxuICAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzIH0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpXG4pO1xuIiwiY29uc3QgU291cmNlcyA9IHJlcXVpcmUoJy4vc291cmNlcycpO1xuY29uc3QgU3luY2VkRmlsZSA9IHJlcXVpcmUoJy4uL3N5bmNlZEZpbGUuanMnKTtcblxuZnVuY3Rpb24gRGVja3Moc2V0dGluZ3MsIGRyaXZlKSB7XG4gIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgdGhpcy5kcml2ZSA9IGRyaXZlO1xufVxuXG5EZWNrcy5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXR0aW5ncy5nZXQoKS5kZWNrcztcbn07XG5cbkRlY2tzLnByb3RvdHlwZS5hZGQgPSBhc3luYyBmdW5jdGlvbihzb3VyY2UsIGxvY2F0b3IpIHsgXG4gIGlmICghU291cmNlc1tzb3VyY2VdKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHNvdXJjZScpO1xuICB9XG5cbiAgLy8gZ2V0IG1ldGFkYXRhIGZyb20gc291cmNlXG4gIGNvbnN0IG1ldGEgPSBhd2FpdCBTb3VyY2VzW3NvdXJjZV0uZ2V0TWV0YShsb2NhdG9yKTtcbiAgY29uc29sZS5sb2cobWV0YSk7XG5cbiAgLy8gY3JlYXRlIChob3BlZnVsbHkpIHVuaXF1ZSBmaWxlbmFtZVxuICBjb25zdCBmaWxlbmFtZSA9IGAke21ldGEubmFtZX1fJHtuZXcgRGF0ZSgpLmdldFRpbWUoKX1gO1xuICBcbiAgLy8gcmV0cmlldmUgc2V0dGluZ3MgYW5kIHVwZGF0ZVxuICBjb25zdCBzID0gdGhpcy5zZXR0aW5ncy5nZXQoKTtcbiAgcy5kZWNrcy5wdXNoKHtcbiAgICBzb3VyY2UsXG4gICAgYXQ6IGxvY2F0b3IsXG4gICAgbmFtZTogbWV0YS5uYW1lLFxuICAgIHZlcnNpb246IG1ldGEudmVyc2lvbixcbiAgICBkYXRhOiBmaWxlbmFtZSxcbiAgfSk7XG4gIGNvbnN0IGZpbGUgPSBuZXcgU3luY2VkRmlsZSh0aGlzLmRyaXZlLCBmaWxlbmFtZSk7XG5cbiAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIGZpbGUuc3luY2hyb25pemUoJ2lkLGVhc2UsaW50ZXJ2YWwsbmV4dFxcbicpLFxuICAgIHRoaXMuc2V0dGluZ3Muc2V0KHMpLFxuICBdKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGVja3M7XG4iLCJjb25zdCBnaXRodWIgPSB7XG4gIGdldE1ldGE6IGFzeW5jIGZ1bmN0aW9uKGxvY2F0b3IpIHsgLy8gbG9jYXRvciBpcyBvZiB0aGUgZm9ybSAndXNlci9yZXBvLW5hbWUnXG4gICAgcmV0dXJuIGZldGNoKGBodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyR7bG9jYXRvcn0vY29udGVudHMvZGVjay5qc29uYClcbiAgICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oanNvbiA9PiBKU09OLnBhcnNlKHdpbmRvdy5hdG9iKGpzb24uY29udGVudCkpKVxuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdpdGh1Yixcbn07XG4iLCJjb25zdCBxcyA9IHJlcXVpcmUoJy4vdXRpbC9xdWVyeXN0cmluZycpO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJy4vdXRpbC9odHRwJyk7XG5cbmNvbnN0IGF1dGhTY29wZSA9ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RyaXZlLmFwcGRhdGEnO1xuY29uc3QgZW5kcG9pbnRzID0ge1xuICB1cGxvYWQ6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS91cGxvYWQvZHJpdmUvdjMvZmlsZXMnLFxuICBmaWxlczogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2RyaXZlL3YzL2ZpbGVzJyxcbiAgZHJpdmU6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9kcml2ZS92MycsXG4gIGF1dGg6ICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdjIvYXV0aCcsXG4gIHRva2VuVmFsaWRhdGlvbjogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My90b2tlbmluZm8nLFxufTtcblxuY29uc3QgY2xpZW50SWQgPSAnNjMxNzc4MzY1ODk2LXExYmloaDg4NGRlbDlpNmtnMXFmMjJkNnQ1NjNrajJlLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJztcblxuZnVuY3Rpb24gRHJpdmUodG9rZW4sIGV4cGlyeSkge1xuICB0aGlzLnRva2VuID0gdG9rZW47XG4gIHRoaXMuZXhwaXJ5ID0gZXhwaXJ5O1xufVxuXG5Ecml2ZS5wcm90b3R5cGUuaHR0cE1ldGhvZCA9IGFzeW5jIGZ1bmN0aW9uKGVuZHBvaW50LCBxdWVyeSwgYm9keSwgbWV0aG9kLCBoZWFkZXJzKSB7XG4gIHJldHVybiBodHRwLnJlcXVlc3QoZW5kcG9pbnQsIHF1ZXJ5LCBib2R5LCBtZXRob2QsIE9iamVjdC5hc3NpZ24oeyBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy50b2tlbn1gIH0sIGhlYWRlcnMpKTtcbn07XG5cbkRyaXZlLmF1dGhVUkwgPSBgJHtlbmRwb2ludHMuYXV0aH0/JHtxcy5idWlsZCh7XG4gICAgY2xpZW50X2lkOiBjbGllbnRJZCxcbiAgICByZWRpcmVjdF91cmk6ICdodHRwczovL2xvY2FsaG9zdDo4MDAwL2F1dGgnLFxuICAgIHJlc3BvbnNlX3R5cGU6ICd0b2tlbicsXG4gICAgc2NvcGU6IGF1dGhTY29wZSxcbiAgICBpbmNsdWRlX2dyYW50ZWRfc2NvcGVzOiB0cnVlLFxuICAgIHN0YXRlOiAnZm9vJyxcbiAgfSl9YDsgXG5cbi8vIHN0b3JlIGFuZCByZXRyaWV2ZSB0aGUgdG9rZW4gaW4gbG9jYWxzdG9yYWdlXG5Ecml2ZS5yZXRyaWV2ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXdpbmRvdy5sb2NhbFN0b3JhZ2UuZHJpdmVEYXRhKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgbG9hZCB0b2tlbi4nKTtcbiAgfVxuXG4gIGNvbnN0IHNhdmVkID0gSlNPTi5wYXJzZSh3aW5kb3cubG9jYWxTdG9yYWdlLmRyaXZlRGF0YSk7XG4gIHJldHVybiBuZXcgRHJpdmUoc2F2ZWQudG9rZW4sIHNhdmVkLmV4cGlyeSk7XG59O1xuXG4vLyBUT0RPOiB0aGlzIGZ1bmN0aW9uIGlzIGNvbnZlbmllbnQgYnV0IGJyZWFrcyBlbmNhcHN1bGF0aW9uXG5Ecml2ZS5zZXR1cCA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIGNvbnN0IGQgPSBEcml2ZS5yZXRyaWV2ZSgpO1xuICAgIGF3YWl0IGQudmFsaWRhdGUoKTtcbiAgICByZXR1cm4gZDtcbiAgfSBjYXRjaChlKSB7XG4gICAgd2luZG93LmxvY2F0aW9uID0gRHJpdmUuYXV0aFVSTDtcbiAgfVxufTtcblxuRHJpdmUucHJvdG90eXBlLnBlcnNpc3QgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LmxvY2FsU3RvcmFnZS5kcml2ZURhdGEgPSBKU09OLnN0cmluZ2lmeSh7IHRva2VuOiB0aGlzLnRva2VuLCBleHBpcnk6IHRoaXMuZXhwaXJ5IH0pO1xufTtcblxuRHJpdmUucHJvdG90eXBlLnZhbGlkYXRlID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cE1ldGhvZChlbmRwb2ludHMudG9rZW5WYWxpZGF0aW9uLCB7IGFjY2Vzc190b2tlbjogdGhpcy50b2tlbiB9LCB1bmRlZmluZWQsICdHRVQnKTtcbiAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gIGlmIChqc29uLmVycm9yIHx8IGpzb24uYXVkICE9PSBjbGllbnRJZCB8fCBqc29uLnNjb3BlICE9PSBhdXRoU2NvcGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rva2VuIHZhbGlkYXRpb24gZmFpbGVkJyk7XG4gIH1cbn07XG5cbkRyaXZlLnByb3RvdHlwZS5nZXQgPSBhc3luYyBmdW5jdGlvbihpZCkge1xuICByZXR1cm4gdGhpcy5odHRwTWV0aG9kKGAke2VuZHBvaW50cy5maWxlc30vJHtpZH1gLCB7IGFsdDogJ21lZGlhJyB9LCB1bmRlZmluZWQsICdHRVQnKTtcbn07XG5cbkRyaXZlLnByb3RvdHlwZS5saXN0ID0gYXN5bmMgZnVuY3Rpb24ocSwgc3BhY2VzID0gWydhcHBEYXRhRm9sZGVyJ10pIHtcbiAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwTWV0aG9kKGVuZHBvaW50cy5maWxlcywge1xuICAgIHNwYWNlczogc3BhY2VzLmpvaW4oJywnKSxcbiAgICBxLFxuICB9LCB1bmRlZmluZWQsICdHRVQnKTtcbiBcbiAgcmV0dXJuIChhd2FpdCByZXMuanNvbigpKS5maWxlczs7XG59O1xuXG5Ecml2ZS5wcm90b3R5cGUucHV0ID0gYXN5bmMgZnVuY3Rpb24obmFtZSwgZGF0YSwgcGFyZW50cyA9IFsnYXBwRGF0YUZvbGRlciddKSB7XG4gIGNvbnN0IG1ldGEgPSB7XG4gICAgbmFtZSxcbiAgICBwYXJlbnRzLFxuICB9O1xuXG4gIGNvbnN0IGJvZHkgPSBodHRwLm11bHRpcGFydChbSlNPTi5zdHJpbmdpZnkobWV0YSksIGRhdGFdLCBbaHR0cC5taW1lLmpzb24sIGh0dHAubWltZS5wbGFpblRleHRdKTtcblxuICByZXR1cm4gdGhpcy5odHRwTWV0aG9kKGVuZHBvaW50cy51cGxvYWQsIHsgdXBsb2FkVHlwZTogJ211bHRpcGFydCcgfSwgYm9keSwgJ1BPU1QnLCB7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvcmVsYXRlZDsgYm91bmRhcnk9Ym91bmRhcnknLFxuICAgICdDb250ZW50LUxlbmd0aCc6IEJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEsICd1dGY4JyksXG4gIH0pO1xufTtcblxuRHJpdmUucHJvdG90eXBlLnVwZGF0ZSA9IGFzeW5jIGZ1bmN0aW9uKGlkLCBuZXdEYXRhKSB7XG4gIHJldHVybiB0aGlzLmh0dHBNZXRob2QoYCR7ZW5kcG9pbnRzLnVwbG9hZH0vJHtpZH1gLCB7IHVwbG9hZFR5cGU6ICdtZWRpYScgfSwgbmV3RGF0YSwgJ1BBVENIJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRHJpdmU7XG4iLCJjb25zdCBTeW5jZWRGaWxlID0gcmVxdWlyZSgnLi9zeW5jZWRGaWxlJyk7XG5cbi8vIGZpcnN0IGNhbGwgc2hvdWxkIGFsd2F5cyBiZSBzeW5jaHJvbml6ZShkZWZhdWx0cykgdG8gcHJldmVudCBvdmVyd3JpdGluZyBvZiByZW1vdGUgZGF0YVxuZnVuY3Rpb24gU2V0dGluZ3MoZHJpdmUpIHtcbiAgdGhpcy5kcml2ZSA9IGRyaXZlO1xuICB0aGlzLmZpbGUgPSBuZXcgU3luY2VkRmlsZShkcml2ZSwgJ3RhYnVuLmpzb24nKTsgXG59XG5cblNldHRpbmdzLmRlZmF1bHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBkZWNrczogW10sXG4gIH07XG59O1xuXG5TZXR0aW5ncy5wcm90b3R5cGUuc3luY2hyb25pemUgPSBhc3luYyBmdW5jdGlvbihvYmplY3QpIHtcbiAgcmV0dXJuIHRoaXMuZmlsZS5zeW5jaHJvbml6ZShvYmplY3QgPyBKU09OLnN0cmluZ2lmeShvYmplY3QpIDogdW5kZWZpbmVkKTtcbn07XG5cblNldHRpbmdzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgdGhpcy5maWxlLnNldExvY2FsKEpTT04uc3RyaW5naWZ5KG9iamVjdCkpO1xuICByZXR1cm4gdGhpcy5zeW5jaHJvbml6ZSgpO1xufTtcblxuU2V0dGluZ3MucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLmZpbGUucmV0cmlldmUoKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldHRpbmdzOyBcbiIsImZ1bmN0aW9uIFN5bmNlZEZpbGUoZHJpdmUsIG5hbWUpIHtcbiAgdGhpcy5kcml2ZSA9IGRyaXZlO1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmxvY2FsU3RvcmFnZUlkS2V5ID0gbmFtZSArICdfaWQnO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kVGltZXN0YW1wKHN0cikge1xuICByZXR1cm4gYCR7bmV3IERhdGUoKS5nZXRUaW1lKCl9fCR7c3RyfWA7XG59XG5cbmZ1bmN0aW9uIHN0cmlwVGltZXN0YW1wKHN0cikge1xuICByZXR1cm4gc3RyLnN1YnN0cihzdHIuaW5kZXhPZignfCcpICsgMSk7XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVzdGFtcChzdHIpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHN0ci5zdWJzdHIoMCwgc3RyLmluZGV4T2YoJ3wnKSksIDEwKTtcbn1cblxuZnVuY3Rpb24gc3BsaXRUaW1lc3RhbXAoc3RyKSB7XG4gIGlmICghc3RyKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdGltZTogZ2V0VGltZXN0YW1wKHN0ciksXG4gICAgY29udGVudHM6IHN0cmlwVGltZXN0YW1wKHN0ciksXG4gIH07XG59XG5cbi8vIGdldCBpZCBvZiBmaWxlIGJ5IG5hbWVcblN5bmNlZEZpbGUucHJvdG90eXBlLnJldHJpZXZlUmVtb3RlSWQgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgaWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2VbdGhpcy5sb2NhbFN0b3JhZ2VJZEtleV0pIHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZVt0aGlzLmxvY2FsU3RvcmFnZUlkS2V5XTtcbiAgfVxuXG4gIGNvbnN0IGZpbGVzID0gYXdhaXQgdGhpcy5kcml2ZS5saXN0KGBuYW1lID0gJyR7dGhpcy5uYW1lfSdgKTtcbiAgaWYgKGZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB3aW5kb3cubG9jYWxTdG9yYWdlW3RoaXMubG9jYWxTdG9yYWdlSWRLZXldID0gZmlsZXNbMF0uaWQ7XG4gIHJldHVybiBmaWxlc1swXS5pZDtcbn07XG5cbi8vIGdldCBmaWxlIHdpdGggcHJlcGVuZGVkIHRpbWVzdGFtcCBmcm9tIHJlbW90ZVxuU3luY2VkRmlsZS5wcm90b3R5cGUucmV0cmlldmVSZW1vdGUgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgY29uc3QgaWQgPSBhd2FpdCB0aGlzLnJldHJpZXZlUmVtb3RlSWQoKTtcbiAgXG4gIGlmICghaWQpIHtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5sb2NhbFN0b3JhZ2VJZEtleSk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmRyaXZlLmdldChpZCkpLnRleHQoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLmxvY2FsU3RvcmFnZUlkS2V5KTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG4vLyBzZXQgZmlsZSBvbiByZW1vdGVcblN5bmNlZEZpbGUucHJvdG90eXBlLnNldFJlbW90ZSA9IGFzeW5jIGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgY29uc3QgaWQgPSBhd2FpdCB0aGlzLnJldHJpZXZlUmVtb3RlSWQoKTtcbiAgY29uc3Qgc3RyID0gcHJlcGVuZFRpbWVzdGFtcChjb250ZW50KTtcbiAgLy8gZmlsZSBkb2VzIG5vdCBleGlzdCwgY3JlYXRlXG4gIGlmICghaWQpIHtcbiAgICByZXR1cm4gdGhpcy5kcml2ZS5wdXQodGhpcy5uYW1lLCBzdHIpO1xuICB9XG5cbiAgLy8gZmlsZSBleGlzdHMsIHVwZGF0ZVxuICByZXR1cm4gdGhpcy5kcml2ZS51cGRhdGUoaWQsIHN0cik7XG59O1xuXG4vLyBnZXQgZmlsZSB3aXRoIHByZXBlbmRlZCB0aW1lc3RhbXAgZnJvbSBsb2NhbFN0b3JhZ2VcblN5bmNlZEZpbGUucHJvdG90eXBlLnJldHJpZXZlTG9jYWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2VbdGhpcy5uYW1lXTtcbn1cblxuLy8gc2V0IGZpbGUgaW4gbG9jYWxTdG9yYWdlXG5TeW5jZWRGaWxlLnByb3RvdHlwZS5zZXRMb2NhbCA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgd2luZG93LmxvY2FsU3RvcmFnZVt0aGlzLm5hbWVdID0gcHJlcGVuZFRpbWVzdGFtcChjb250ZW50KTsgIFxufVxuXG4vLyBjb252ZW5pZW5jZSBtZXRob2QgdG8gZ2V0IGRhdGEgYW5kIHN0cmlwIHRpbWVzdGFtcFxuU3luY2VkRmlsZS5wcm90b3R5cGUucmV0cmlldmUgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZmlsZSA9IHRoaXMucmV0cmlldmVMb2NhbCgpO1xuICBpZiAoIWZpbGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBsb2FkIGxvY2FsIGRhdGEgZm9yIGZpbGUgJHt0aGlzLm5hbWV9YCk7XG4gIH1cbiAgcmV0dXJuIHN0cmlwVGltZXN0YW1wKGZpbGUpO1xufTtcblxuU3luY2VkRmlsZS5wcm90b3R5cGUuc3luY2hyb25pemUgPSBhc3luYyBmdW5jdGlvbihjb250ZW50cykge1xuICBjb25zdCByZW1vdGUgPSBzcGxpdFRpbWVzdGFtcChhd2FpdCB0aGlzLnJldHJpZXZlUmVtb3RlKCkpO1xuICBjb25zdCBsb2NhbCA9IHNwbGl0VGltZXN0YW1wKHRoaXMucmV0cmlldmVMb2NhbCgpKTtcblxuICBpZiAobG9jYWwgJiYgKChyZW1vdGUgJiYgbG9jYWwudGltZSA+IHJlbW90ZS50aW1lKSB8fCAhcmVtb3RlKSkge1xuICAgIC8vIG92ZXJ3cml0ZSByZW1vdGUgd2l0aCBsb2NhbCBpZiBsb2NhbCBleGlzdHMgYW5kIGVpdGhlcjpcbiAgICAvLyAtIHJlbW90ZSBleGlzdHMgYW5kIGlzIG91dGRhdGVkXG4gICAgLy8gLSByZW1vdGUgZG9lcyBub3QgZXhpc3RcbiAgICBhd2FpdCB0aGlzLnNldFJlbW90ZShsb2NhbC5jb250ZW50cyk7XG4gIH0gZWxzZSBpZiAocmVtb3RlKSB7XG4gICAgLy8gb3ZlcndyaXRlIGxvY2FsIHdpdGggcmVtb3RlIGlmIHJlbW90ZSBleGlzdHMgYW5kIGVpdGhlcjpcbiAgICAvLyAtIGxvY2FsIGV4aXN0cyBhbmQgaXMgb3V0ZGF0ZWRcbiAgICAvLyAtIGxvY2FsIGRvZXMgbm90IGV4aXN0XG4gICAgdGhpcy5zZXRMb2NhbChyZW1vdGUuY29udGVudHMpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJvdGggZG8gbm90IGV4aXN0XG4gICAgaWYgKCFjb250ZW50cykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXRhIHRvIHN5bmNocm9uaXplIScpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0TG9jYWwoY29udGVudHMpO1xuICAgIGF3YWl0IHRoaXMuc2V0UmVtb3RlKGNvbnRlbnRzKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bmNlZEZpbGU7XG4iLCJjb25zdCBxcyA9IHJlcXVpcmUoJy4vcXVlcnlzdHJpbmcnKTtcblxuY29uc3QgbWltZSA9IHtcbiAganNvbjogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICBwbGFpblRleHQ6ICd0ZXh0L3BsYWluJyxcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIHJlcXVlc3QodXJsLCBxdWVyeSwgYm9keSwgbWV0aG9kLCBoZWFkZXJzKSB7XG4gIGxldCByZXNvdXJjZSA9IHVybDtcbiAgaWYgKHF1ZXJ5KSB7XG4gICAgcmVzb3VyY2UgKz0gYD8ke3FzLmJ1aWxkKHF1ZXJ5KX1gO1xuICB9XG5cbiAgcmV0dXJuIGZldGNoKHJlc291cmNlLCB7XG4gICAgYm9keSxcbiAgICBtZXRob2QsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnMoaGVhZGVycyksXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBhcnQocGFydHMsIG1pbWVUeXBlcywgYm91bmRhcnkgPSAnYm91bmRhcnknKSB7XG4gIGxldCByZXN1bHQgPSAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdCArPSBgLS0ke2JvdW5kYXJ5fVxuQ29udGVudC1UeXBlOiAke21pbWVUeXBlc1tpXX07IGNoYXJzZXQ9VVRGLThcblxuJHtwYXJ0c1tpXX1cbmA7XG4gIH1cbiAgcmVzdWx0ICs9IGBcbi0tJHtib3VuZGFyeX0tLWA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZXF1ZXN0LFxuICBtdWx0aXBhcnQsXG4gIG1pbWUsXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlKHN0cikge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIHN0ci5zcGxpdCgnJicpLmZvckVhY2gocCA9PiB7XG4gICAgICBpZiAocC5pbmNsdWRlcygnPScpKSB7XG4gICAgICAgIGNvbnN0IHBhaXIgPSBwLnNwbGl0KCc9Jyk7XG4gICAgICAgIHJldFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXRbcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXQ7XG4gIH0sXG4gIGJ1aWxkKG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChrZXkgPT4gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KG9ialtrZXldKX1gKS5qb2luKCcmJyk7XG4gIH1cbn07XG4iLCIvLyBUYWJ1biAtIGEgZGlzdHJpYnV0ZWQsIGV4dGVuc2libGUgc3BhY2VkLXJlcGV0aXRpb24gZmxhc2hjYXJkIHNvZnR3YXJlXG4vLyBDb3B5cmlnaHQgKEMpIDIwMTggU2lkIE1hbmlcbi8vXG4vLyBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuLy8gaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbi8vIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuLy8gTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbi8vXG4vLyBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbi8vIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4vLyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4vLyBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbi8vXG4vLyBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2Vcbi8vIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbnJlcXVpcmUoJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZScpO1xuXG5jb25zdCBzZXR0aW5ncyA9IHJlcXVpcmUoJy4vcmVuZGVyL3NldHRpbmdzJyk7XG5jb25zdCBkZWNrcyA9IHJlcXVpcmUoJy4vcmVuZGVyL2RlY2tzJyk7XG5jb25zdCBhdXRoID0gcmVxdWlyZSgnLi9yZW5kZXIvYXV0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0dGluZ3MsXG4gIGRlY2tzLFxuICBhdXRoLFxufTtcbiIsImNvbnN0IERyaXZlID0gcmVxdWlyZSgnLi4vY29yZS9kcml2ZScpO1xuY29uc3QgcXMgPSByZXF1aXJlKCcuLi9jb3JlL3V0aWwvcXVlcnlzdHJpbmcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBmdW5jdGlvbiBhdXRoKCkge1xuICBjb25zdCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpO1xuICBpZiAoaGFzaC5sZW5ndGggPiAwKSB7XG4gICAgLy8gcmV0dXJuIGZyb20gZ29vZ2xlXG4gICAgY29uc3QgcmVzcG9uc2UgPSBxcy5wYXJzZShoYXNoKTtcblxuICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignQXV0aCBmYWlsdXJlLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHZhbGlkYXRlIHRoZSB0b2tlblxuICAgIHRyeSB7IFxuICAgICAgY29uc3QgZHJpdmUgPSBuZXcgRHJpdmUocmVzcG9uc2UuYWNjZXNzX3Rva2VuLCByZXNwb25zZS5leHBpcmVzX2luICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCkpO1xuICAgICAgYXdhaXQgZHJpdmUudmFsaWRhdGUocmVzcG9uc2UuYWNjZXNzX3Rva2VuKTtcbiAgICAgIGRyaXZlLnBlcnNpc3QoKTtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICcuLi9kZWNrcy8nO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gJ0F1dGhlbnRpY2F0aW9uIGVycm9yLiA8YSBocmVmPVwiL2F1dGgvXCI+VHJ5IGFnYWluPC9hPic7XG4gICAgfVxuICB9IGVsc2UgaWYgKGF3YWl0IERyaXZlLnNldHVwKCkpIHtcbiAgICB3aW5kb3cubG9jYXRpb24gPSAnLi4vZGVja3MvJztcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRIVE1MKG9iamVjdCkge1xuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvYmplY3QudGFnLnRvVXBwZXJDYXNlKCkpO1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goYXR0ciA9PiB7XG4gICAgaWYgKGF0dHIgIT09ICd0YWcnICYmIGF0dHIgIT09ICdjaGlsZHJlbicgJiYgYXR0ciAhPT0gJ3RleHQnKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyLCBvYmplY3RbYXR0cl0pO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKG9iamVjdC5jaGlsZHJlbikge1xuICAgIG9iamVjdC5jaGlsZHJlbi5mb3JFYWNoKGMgPT4ge1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChidWlsZEhUTUwoYykpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKG9iamVjdC50ZXh0KSB7XG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvYmplY3QudGV4dCkpO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG4iLCJjb25zdCBEZWNrcyA9IHJlcXVpcmUoJy4uL2NvcmUvZGVjay9kZWNrcycpO1xuY29uc3QgRHJpdmUgPSByZXF1aXJlKCcuLi9jb3JlL2RyaXZlJyk7XG5jb25zdCBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uL2NvcmUvc2V0dGluZ3MnKTtcbmNvbnN0IGJ1aWxkID0gcmVxdWlyZSgnLi9idWlsZEhUTUwnKTtcblxuZnVuY3Rpb24gbGF5b3V0KGRlY2tzKSB7XG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZWNrcycpOyAgXG4gIFxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRlY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZGl2LmFwcGVuZENoaWxkKGJ1aWxkKHtcbiAgICAgIHRhZzogJ2RpdicsXG4gICAgICAnY2xhc3MnOiAnZGVjaycsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdGFnOiAnc3BhbicsXG4gICAgICAgICdjbGFzcyc6ICdkZWNrLW5hbWUnLFxuICAgICAgICB0ZXh0OiBkZWNrc1tpXS5uYW1lLFxuICAgICAgfSwge1xuICAgICAgICB0YWc6ICdzcGFuJyxcbiAgICAgICAgJ2NsYXNzJzogJ2RlY2stc291cmNlJyxcbiAgICAgICAgdGV4dDogZGVja3NbaV0uc291cmNlLFxuICAgICAgfV0sXG4gICAgfSkpOyBcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBkaXNwbGF5KCkge1xuICAvLyByZWRpcmVjdCB0byBhdXRoIGlmIHRva2VuIGRvZXNuJ3QgZXhpc3RcbiAgY29uc3QgZHJpdmUgPSBhd2FpdCBEcml2ZS5zZXR1cCgpO1xuXG4gIC8vIGNyZWF0ZSBzZXR0aW5ncyBhbmQgc3luY1xuICBjb25zdCBzZXR0aW5ncyA9IG5ldyBTZXR0aW5ncyhkcml2ZSk7XG4gIGF3YWl0IHNldHRpbmdzLnN5bmNocm9uaXplKFNldHRpbmdzLmRlZmF1bHQoKSk7XG4gIFxuICAvLyBjcmVhdGUgZGVjayBtYW5hZ2VyXG4gIGNvbnN0IGRlY2tzID0gbmV3IERlY2tzKHNldHRpbmdzLCBkcml2ZSk7XG4gIGxheW91dChkZWNrcy5saXN0KCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgZGlzcGxheSB9O1xuIiwiY29uc3QgRHJpdmUgPSByZXF1aXJlKCcuLi9jb3JlL2RyaXZlJyk7XG5jb25zdCBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uL2NvcmUvc2V0dGluZ3MnKTtcbmNvbnN0IGJ1aWxkID0gcmVxdWlyZSgnLi9idWlsZEhUTUwnKTtcblxuZnVuY3Rpb24gbGF5b3V0KHMpIHtcbiAgY29uc29sZS5sb2cocyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRpc3BsYXkoKSB7XG4gIGNvbnN0IGRyaXZlID0gYXdhaXQgRHJpdmUuc2V0dXAoKTtcbiAgY29uc3Qgc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3MoZHJpdmUpO1xuICBhd2FpdCBzZXR0aW5ncy5zeW5jaHJvbml6ZSgpO1xuXG4gIGxheW91dChzZXR0aW5ncy5nZXQoKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBkaXNwbGF5IH1cbiJdfQ==
